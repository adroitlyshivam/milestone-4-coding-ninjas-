 BinaryTreeNode<int>* buildTree(int *postorder, int postLength, int *inorder, int inLength) {
        if(postLength!=inLength || postorder==nullptr || inorder==nullptr ||
            postLength==0)
        return nullptr;
    int rootVal = postorder[postLength-1], leftCount, rightCount;
    // Search for rootVal in inorder
    for(leftCount=0; leftCount<inLength && inorder[leftCount]!=rootVal;
            leftCount++);
    // leftCount is no of nodes of left tree
    rightCount = postLength-leftCount-1;
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootVal);
    root->left = buildTree(postorder,leftCount,inorder,leftCount);
    root->right = buildTree(postorder+leftCount,rightCount,
            inorder+leftCount+1,rightCount);
    return root;
}